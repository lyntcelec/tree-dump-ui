Tree:
├── electron
│   ├── electron-env.d.ts
│   ├── main
│   │   └── index.ts
│   └── preload
│       └── index.ts
├── src
│   ├── App.vue
│   ├── assets
│   ├── components
│   ├── main.ts
│   ├── style.css
│   └── vite-env.d.ts

Files:
```./electron/electron-env.d.ts
/// <reference types="vite-plugin-electron/electron-env" />

declare namespace NodeJS {
  interface ProcessEnv {
    VSCODE_DEBUG?: 'true'
    /**
     * The built directory structure
     *
     * ```tree
     * ├─┬ dist-electron
     * │ ├─┬ main
     * │ │ └── index.js    > Electron-Main
     * │ └─┬ preload
     * │   └── index.mjs   > Preload-Scripts
     * ├─┬ dist
     * │ └── index.html    > Electron-Renderer
     * ```
     */
    APP_ROOT: string
    /** /dist/ or /public/ */
    VITE_PUBLIC: string
  }
}

```
```./electron/main/index.ts
import { app, BrowserWindow, shell, ipcMain, dialog } from "electron";
import { createRequire } from 'node:module'
import { fileURLToPath } from 'node:url'
import path from 'node:path'
import os from 'node:os'
import { promisify } from "node:util";
import fs from "node:fs";

const require = createRequire(import.meta.url)
const __dirname = path.dirname(fileURLToPath(import.meta.url))

process.env.APP_ROOT = path.join(__dirname, '../..')

export const MAIN_DIST = path.join(process.env.APP_ROOT, 'dist-electron')
export const RENDERER_DIST = path.join(process.env.APP_ROOT, 'dist')
export const VITE_DEV_SERVER_URL = process.env.VITE_DEV_SERVER_URL

process.env.VITE_PUBLIC = VITE_DEV_SERVER_URL
  ? path.join(process.env.APP_ROOT, 'public')
  : RENDERER_DIST

if (os.release().startsWith('6.1')) app.disableHardwareAcceleration()
if (process.platform === 'win32') app.setAppUserModelId(app.getName())

if (!app.requestSingleInstanceLock()) {
  app.quit()
  process.exit(0)
}

let win: BrowserWindow | null = null
const preload = path.join(__dirname, '../preload/index.mjs')
const indexHtml = path.join(RENDERER_DIST, 'index.html')

async function createWindow() {
  win = new BrowserWindow({
    title: 'Main window',
    icon: path.join(process.env.VITE_PUBLIC, 'favicon.ico'),
    webPreferences: {
      preload,
    },
  })

  if (VITE_DEV_SERVER_URL) {
    win.loadURL(VITE_DEV_SERVER_URL)
    setTimeout(() => { win.webContents.openDevTools() }, 1000);
  } else {
    win.loadFile(indexHtml)
  }

  win.webContents.on('did-finish-load', () => {
    win?.webContents.send('main-process-message', new Date().toLocaleString())
  })

  win.webContents.setWindowOpenHandler(({ url }) => {
    if (url.startsWith('https:')) shell.openExternal(url)
    return { action: 'deny' }
  })
}

app.whenReady().then(createWindow)

app.on('window-all-closed', () => {
  win = null
  if (process.platform !== 'darwin') app.quit()
})

app.on('second-instance', () => {
  if (win) {
    if (win.isMinimized()) win.restore()
    win.focus()
  }
})

app.on('activate', () => {
  const allWindows = BrowserWindow.getAllWindows()
  if (allWindows.length) {
    allWindows[0].focus()
  } else {
    createWindow()
  }
})

ipcMain.handle('open-win', (_, arg) => {
  const childWindow = new BrowserWindow({
    webPreferences: {
      preload,
      nodeIntegration: true,
      contextIsolation: false,
    },
  })

  if (VITE_DEV_SERVER_URL) {
    childWindow.loadURL(`${VITE_DEV_SERVER_URL}#${arg}`)
  } else {
    childWindow.loadFile(indexHtml, { hash: arg })
  }
})

// Helper functions
const readdir = promisify(fs.readdir);
const stat = promisify(fs.stat);
const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);

// Modified scanDirectory function
async function scanDirectory(dirPath: string, selectedIds: Set<string>) {
  const entries = await readdir(dirPath);
  const tree = [];

  for (const entry of entries) {
    const fullPath = path.join(dirPath, entry);
    const entryStat = await stat(fullPath);

    const node: any = {
      id: fullPath,
      label: entry,
      checked: selectedIds.has(fullPath),
    };

    if (entryStat.isDirectory()) {
      const children = await scanDirectory(fullPath, selectedIds);
      node.children = children;
    }
    tree.push(node);
  }

  return tree;
}

// IPC Handlers
ipcMain.handle("scan-directory", async (_event, dirPath: string) => {
  try {
    console.log("Scanning directory:", dirPath);
    const treedumpPath = path.join(dirPath, "treedump.json");
    let selectedIds = new Set<string>();

    if (fs.existsSync(treedumpPath)) {
      const data = await readFile(treedumpPath, "utf-8");
      const selectedNodes = JSON.parse(data);
      selectedIds = new Set(selectedNodes.map((node: any) => node.id));
    }

    const treeData = await scanDirectory(dirPath, selectedIds);
    return treeData;
  } catch (error) {
    console.error("Error scanning directory:", error);
    return [];
  }
});

ipcMain.handle("save-treedump", async (_event, dirPath: string, data: any) => {
  const treedumpPath = path.join(dirPath, "treedump.json");
  await writeFile(treedumpPath, JSON.stringify(data, null, 2), "utf-8");
  return { success: true };
});

ipcMain.handle("open-directory-dialog", async (_event) => {
  const result = await dialog.showOpenDialog({
    properties: ["openDirectory"],
  });
  if (result.canceled) {
    return null;
  } else {
    return result.filePaths[0];
  }
});

```
```./electron/preload/index.ts
import { ipcRenderer, contextBridge } from 'electron'

contextBridge.exposeInMainWorld("api", {
  scanDirectory: (dirPath: string) => ipcRenderer.invoke("scan-directory", dirPath),
  saveTreedump: (dirPath: string, data: any) => ipcRenderer.invoke("save-treedump", dirPath, data),
  openDirectory: () => ipcRenderer.invoke("open-directory-dialog"),
});
```
```./src/App.vue
<template>
  <div style="padding: 20px;">
    <div style="display: flex; align-items: center; margin-bottom: 20px;">
      <ElInput v-model="path" placeholder="Current Path" @change="onPathChange" clearable style="flex: 1;" />
      <ElButton type="primary" @click="browseDirectory" style="margin-left: 10px;">
        Browse
      </ElButton>
    </div>
    <ElTree v-if="treeData.length > 0" :data="treeData" show-checkbox node-key="id"
      :default-checked-keys="defaultCheckedKeys" :props="defaultProps" ref="treeRef" />
    <ElButton type="primary" @click="saveSelected" style="margin-top: 20px;">
      Save 
    </ElButton>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted } from "vue";
import { ElTree, ElInput, ElButton, ElMessage } from "element-plus";

const path = ref("");
const treeData = ref([]);
const defaultProps = {
  children: "children",
  label: "label",
};
const treeRef = ref();
const defaultCheckedKeys = ref([]);

const getCheckedNodeIds = (nodes: any[]): string[] => {
  let ids: string[] = [];
  nodes.forEach(node => {
    if (node.checked) {
      ids.push(node.id);
    }
    if (node.children) {
      ids = ids.concat(getCheckedNodeIds(node.children));
    }
  });
  return ids;
};

const loadTreeData = async () => {
  if (path.value && path.value.trim() !== "") {
    const data = await window.api.scanDirectory(path.value);
    treeData.value = data;
    defaultCheckedKeys.value = getCheckedNodeIds(treeData.value);
  }
};

const onPathChange = async () => {
  await loadTreeData();
};

const browseDirectory = async () => {
  const selectedPath = await window.api.openDirectory();
  if (selectedPath) {
    path.value = selectedPath;
    await loadTreeData();
  }
};

const saveSelected = async () => {
  const checkedNodes = treeRef.value.getCheckedNodes(true, false);

  // Clean up the data to only include serializable properties
  const serializableNodes = checkedNodes.map((node: any) => ({
    id: node.id,
    label: node.label
  }));

  console.log(serializableNodes);

  try {
    await window.api.saveTreedump(path.value, serializableNodes);
    ElMessage.success("Selected directories saved to treedump.json");
  } catch (error) {
    ElMessage.error("Failed to save treedump.json");
  }
};

onMounted(async () => {
  await loadTreeData();
});
</script>

<style scoped>
.ElInput {
  margin-bottom: 20px;
}
</style>

```
```./src/main.ts
import { createApp } from "vue";
import App from "./App.vue";
import ElementPlus from "element-plus";
import "element-plus/dist/index.css";

import "./style.css";

const app = createApp(App);

app.use(ElementPlus);
app.mount("#app").$nextTick(() => {
  postMessage({ payload: "removeLoading" }, "*");
});

```
```./src/style.css

```
```./src/vite-env.d.ts
/// <reference types="vite/client" />

declare module '*.vue' {
  import type { DefineComponent } from 'vue'
  const component: DefineComponent<{}, {}, any>
  export default component
}

interface Window {
  api: {
    scanDirectory: (dirPath: string) => Promise<any>;
    saveTreedump: (dirPath: string, data: any) => Promise<any>;
    openDirectory: () => Promise<string | null>;
  };
}
```
